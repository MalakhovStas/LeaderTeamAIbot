"""–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—è—Ä–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
from typing import Optional, Dict

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from company.models import Company
from users.models import User
from utils import utils
from .base_classes import Utils, BaseButton, BaseMessage
from ..config import FACE_BOT, COMPANY_ROLES
from ..utils.states import FSMGreetingScriptStates


class MessageGetContacts(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_contacts'

    def _set_next_state(self) -> str:
        return 'reset_state'

    def _set_reply_text(self) -> Optional[str]:
        return '<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        add_reply_text = "<b>‚ö† –û—à–∏–±–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω</b>"
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            if email := await utils.data_to_email(update.text):
                user.email = email
                await user.asave()
                add_reply_text = "–í–Ω–æ—à—É –≤ —Å–≤–æ–π –±–ª–æ–∫–Ω–æ—Ç–∏–∫, —Å–ø–∞—Å–∏–±–æ üôÇ"

            elif phone_number := await utils.data_to_phone(update.text):
                user.phone_number = phone_number
                await user.asave()
                add_reply_text = "–í–Ω–æ—à—É –≤ —Å–≤–æ–π –±–ª–æ–∫–Ω–æ—Ç–∏–∫, —Å–ø–∞—Å–∏–±–æ üôÇ"
        except Exception as exc:
            self.logger.error(exc)
        return f'{FACE_BOT}{add_reply_text}\n\n{self.reply_text}', self.next_state


class MessageGetRoleInCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_role_in_company'

    def _set_next_state(self) -> str:
        return FSMGreetingScriptStates.get_contacts

    def _set_reply_text(self) -> Optional[str]:
        return (f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –≤–∞—Å –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ. –≠—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º –æ–±—â–µ–Ω–∏–∏ üôÇ\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ üöÄ\n"
                f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email üëá")

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            if (num_role := await utils.data_to_str_digits(data=update.text)) \
                    and 1 <= int(num_role) <= len(COMPANY_ROLES):
                user.role_in_company = COMPANY_ROLES[int(num_role)]
            else:
                user.role_in_company = update.text
            await user.asave()
            add_reply_text = f'–û, –¥—É–º–∞—é, —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üò≤'
        except Exception as exc:
            self.logger.error(exc)
            add_reply_text = f'<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏</b>'
        return f'{FACE_BOT}{add_reply_text}\n\n{self.reply_text}', self.next_state

    def _set_messages(self) -> Dict:
        messages = [MessageGetContacts(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageGetAboutCommand(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_about_command'

    def _set_next_state(self) -> str:
        return FSMGreetingScriptStates.get_role_in_company

    def _set_reply_text(self) -> Optional[str]:
        reply_text = (f'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏. '
                      f'–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:\n\n')
        for num, role in COMPANY_ROLES.items():
            reply_text += f'{num}. {role}\n'
        reply_text += ('\n–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî '
                       '–≤–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –ø–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.')
        return reply_text

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()

            user.company.about_team = update.text
            await user.company.asave()
            add_reply_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>'
        except Exception as exc:
            self.logger.error(exc)
            add_reply_text = '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ</b>'
        return f'{FACE_BOT}{add_reply_text}\n\n{self.reply_text}', self.next_state

    def _set_messages(self) -> Dict:
        return {message.state_or_key: message for message in [MessageGetRoleInCompany()]}


class MessageGetAboutCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_about_company'

    def _set_next_state(self) -> str:
        return FSMGreetingScriptStates.get_about_command

    def _set_reply_text(self) -> Optional[str]:
        reply_text = (f'<b>–ö–∞–∫–∞—è —É –≤–∞—Å –∫–æ–º–∞–Ω–¥–∞? –û–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫, '
                      '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–ø.). –ï—Å–ª–∏ '
                      '–µ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–Ω—ã–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è), '
                      '—Ç–æ–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ.</b>\n\n')
        return reply_text

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.company.about_company = update.text
            await user.company.asave()
            add_reply_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>'
        except Exception as exc:
            self.logger.error(exc)
            add_reply_text = '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>'
        return f'{FACE_BOT}{add_reply_text}\n\n{self.reply_text}', self.next_state

    def _set_messages(self) -> Dict:
        return {message.state_or_key: message for message in [MessageGetAboutCommand()]}


class MessageGetCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
    message_get_about_company = [MessageGetAboutCompany()]
    message_get_role_in_company = [MessageGetRoleInCompany()]

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_company'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = 'reset_state'
        reply_text = "<b>‚ö† –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏</b>"
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            company, fact_create = await Company.objects.aget_or_create(name=update.text)
            user.company = company
            await user.asave()

            if company and fact_create:
                reply_text = (
                    f'<b>–ö–æ–º–ø–∞–Ω–∏—è "{company.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\n'
                    f'–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é (–Ω–∏—à–∞, —Ä–∞–∑–º–µ—Ä –∏ —Ç–ø)</b>')
                next_state = FSMGreetingScriptStates.get_about_company
                self.children_messages = {message.state_or_key: message
                                          for message in self.message_get_about_company}
            elif company and not fact_create:
                reply_text = (
                    f'<b>–ö–æ–º–ø–∞–Ω–∏—è "{company.name}" —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ '
                    '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –í–∞—à–µ–π —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ '
                    '—Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç–∞–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n\n')
                for num, role in COMPANY_ROLES.items():
                    reply_text += f'{num}. {role}\n'
                next_state = FSMGreetingScriptStates.get_role_in_company
                self.children_messages = {message.state_or_key: message
                                          for message in self.message_get_role_in_company}
        except Exception as exc:
            self.logger.error(exc)
        return FACE_BOT + reply_text, next_state


class MessageGetFullname(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    message_get_company = [MessageGetCompany()]
    message_get_role_in_company = [MessageGetRoleInCompany()]

    def _set_state_or_key(self) -> str:
        return 'FSMGreetingScriptStates:get_fullname'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        reply_text = '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>'
        next_state = FSMGreetingScriptStates.get_company
        self.children_messages = {message.state_or_key: message
                                  for message in self.message_get_company}

        add_reply_text = '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b>'
        try:
            name, surname, patronymic = utils.get_fullname(update.text)
            # –∏–∑–º–µ–Ω—ë–Ω –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –æ—Ç—á–µ—Å—Ç–≤–æ
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.name = name
            user.surname = surname
            user.patronymic = patronymic
            await user.asave()
            if surname and name:
                add_reply_text = '–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–æ–º–Ω—é üôÇ'
            else:
                add_reply_text = '–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–æ–º–Ω—é üôÇ'
            if user.company:
                reply_text = (f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ! üòä\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏. '
                              f'–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:\n\n')
                for num, role in COMPANY_ROLES.items():
                    reply_text += f'{num}. {role}\n'
                reply_text += ('\n–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî '
                               '–≤–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –ø–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.')
                next_state = FSMGreetingScriptStates.get_role_in_company
                self.children_messages = {message.state_or_key: message
                                          for message in self.message_get_role_in_company}
        except Exception as exc:
            self.logger.error(exc)
        return f'{FACE_BOT}{add_reply_text}\n\n{reply_text}', next_state


class StartGreetingButton(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è"""

    def _set_name(self) -> str:
        return 'üè¢ \t –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è'

    def _set_next_state(self) -> str:
        return FSMGreetingScriptStates.get_fullname

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + ("–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üòâ "
                           "\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–º–∞–Ω–¥–∞, –∫–æ–º–ø–∞–Ω–∏—è, –∫–∞–∫ —Ç–∞–º "
                           "–∏–¥—É—Ç –¥–µ–ª–∞, –∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏? –ß–µ–º –±–æ–ª—å—à–µ —è –æ –≤–∞—Å –∑–Ω–∞—é, —Ç–µ–º –±–æ–ª–µ–µ "
                           "—Ç–æ—á–µ—á–Ω—É—é –ø–æ–º–æ—â—å —Å–º–æ–≥—É –æ–∫–∞–∑–∞—Ç—å.\n–Ø ‚Äî –Ω–∞–¥–µ–∂–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏ –Ω–∏–∫–æ–º—É –Ω–µ "
                           "–≤—ã–¥–∞–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –æ–±–¥—É–º—ã–≤–∞—Ç—å –∏—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üôÇ\n"
                           "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏. –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç ‚Äî –ò–º—è, –§–∞–º–∏–ª–∏—è. "
                           "–í —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.")

    def _set_messages(self) -> Dict:
        return {message.state_or_key: message
                for message in [MessageGetFullname(parent_name=self.class_name)]}
