"""–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
from typing import List, Optional, Dict

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from users.models import User
from utils import utils
from .base_classes import Utils, BaseButton, BaseMessage, GoToBack
from ..config import FACE_BOT
from ..utils.states import FSMPersonalCabinetStates


class MessageGetNewFIO(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û"""
    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:change_fio'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ò–º—è/–§–∞–º–∏–ª–∏—é</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            name, surname, patronymic = utils.get_fullname(update.text)
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            if name:
                user.name = name
                user.surname = surname
                user.patronymic = patronymic
                await user.asave()
                reply_text = "–ó–≤—É—á–∏—Ç –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ üôÇ"
                next_state = 'reset_state'
            else:
                reply_text = "‚ö† –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n<b>–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>"
        except Exception as exc:
            self.logger.error(exc)
        return reply_text, next_state


class ChangeFIO(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û"""
    def _set_name(self) -> str:
        return '‚úç –ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è/–§–∞–º–∏–ª–∏—é'  # üîë üîê üóù

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç, –≤ –ø–æ—Ä—è–¥–∫–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMPersonalCabinetStates.change_fio

    def _set_messages(self) -> Dict:
        messages = [MessageGetNewFIO(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageGetNewNickname(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ username"""
    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:change_username'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å Telegram-–Ω–∏–∫</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            user.username = update.text[:256].split()[0]
            await user.asave()
            reply_text = "–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–æ–º–Ω—é üôÇ"
            next_state = 'reset_state'
        except Exception as exc:
            self.logger.error(exc)
        return reply_text, next_state


class ChangeUsername(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –ò–∑–º–µ–Ω–∏—Ç—å Telegram-–Ω–∏–∫"""
    def _set_name(self) -> str:
        return 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å Telegram-–Ω–∏–∫'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫ –¥–ª—è Telegram'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMPersonalCabinetStates.change_username

    def _set_messages(self) -> Dict:
        messages = [MessageGetNewNickname(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageGetNewEmail(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email"""
    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:change_email'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            if email := await utils.data_to_email(update.text):
                user.email = email
                await user.asave()
                reply_text = "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ üòâ"
                next_state = 'reset_state'
            else:
                reply_text = ("<b>‚ö† –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n"
                              "–í–≤–µ–¥–∏—Ç–µ Email –≤ —Ñ–æ—Ä–º–∞—Ç–µ mail@mail.com</b>")
        except Exception as exc:
            self.logger.error(exc)
        return reply_text, next_state


class ChangeEmail(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å email"""
    def _set_name(self) -> str:
        return 'üìß –ò–∑–º–µ–Ω–∏—Ç—å Email'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ mail@mail.com'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMPersonalCabinetStates.change_email

    def _set_messages(self) -> Dict:
        messages = [MessageGetNewEmail(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageGetNewPhoneNumber(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    def _set_state_or_key(self) -> str:
        return 'FSMPersonalCabinetStates:change_phone_number'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            if phone_number := await utils.data_to_phone(update.text):
                user.phone_number = phone_number
                await user.asave()
                reply_text = "–ö–ª–∞—Å—Å. –û–±–µ—â–∞—é –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–≤–∞—Ç—å –≤ 4 —É—Ç—Ä–∞ üòÅ"
                next_state = 'reset_state'
            else:
                reply_text = ("<b>‚ö† –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                              "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79998887766</b>")
        except Exception as exc:
            self.logger.error(exc)
        return reply_text, next_state


class ChangePhoneNumber(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    def _set_name(self) -> str:
        return '‚òé –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79998887766'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMPersonalCabinetStates.change_phone_number

    def _set_messages(self) -> Dict:
        messages = [MessageGetNewPhoneNumber(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class PersonalCabinet(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –û–±–æ –º–Ω–µ"""

    def _set_name(self) -> str:
        return '‚öô \t –û–±–æ –º–Ω–µ'

    def _set_next_state(self) -> str:
        return 'reset_state'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        user_id = update.from_user.id
        user = await User.objects.filter(
            tg_accounts__tg_user_id=user_id).select_related("company").afirst()
        reply_text = f"{FACE_BOT}–¢–æ, —á—Ç–æ –≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –º–Ω–µ –æ —Å–µ–±–µ üôÇ\n\n"
        reply_text += f"<b>–ò–º—è:</b> {user.name if user.name else ''}\n"
        reply_text += f"<b>–§–∞–º–∏–ª–∏—è:</b> {user.surname if user.surname else ''}\n"
        # reply_text += f"<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {user.patronymic if user.patronymic else ''}\n"
        reply_text += f"<b>Telegram-–Ω–∏–∫:</b> {user.username if user.username else ''}\n"
        reply_text += f"<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> {user.email if user.email else ''}\n"
        reply_text += f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user.phone_number  if user.phone_number else ''}\n"
        reply_text += f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user.company.name if user.company else ''}\n"
        reply_text += f"\n–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å üëá"
        return reply_text, self.next_state

    def _set_children(self) -> List:
        return [
            ChangeFIO(parent_name=self.class_name),
            ChangeUsername(parent_name=self.class_name),
            ChangeEmail(parent_name=self.class_name),
            ChangePhoneNumber(parent_name=self.class_name),
        ]
