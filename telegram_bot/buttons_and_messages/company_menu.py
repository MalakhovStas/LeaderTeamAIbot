"""–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
from typing import List, Optional, Dict

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from company.models import Company
from users.models import User
from utils import utils
from .base_classes import Utils, BaseButton, BaseMessage, GoToBack
from .calendar_menu import CompanyCalendarButton
from ..config import FACE_BOT, COMPANY_ROLES, INVITE_LINK_LIFE
from ..utils.states import FSMCompanyMenuStates


class MessageChangeAboutTeam(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_about_team'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.company.about_team = update.text
            await user.company.asave()
            reply_text = f"–ó–≤—É—á–∏—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ üòâ –¢–∞–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é."
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeAboutTeam(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üôÇ\n'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_about_team

    def _set_messages(self) -> Dict:
        messages = [MessageChangeAboutTeam(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageChangeAboutCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_about_company'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.company.about_company = update.text
            await user.company.asave()
            reply_text = f"–Ø –∑–∞–ø–æ–º–Ω—é. –£—Å–ø–µ—Ö–æ–≤ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ üòä"
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeAboutCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ üôÇ\n'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_about_company

    def _set_messages(self) -> Dict:
        messages = [MessageChangeAboutCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageChangeRoleInCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_role'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            if (num_role := await utils.data_to_str_digits(data=update.text)) \
                    and 1 <= int(num_role) <= len(COMPANY_ROLES):
                user.role_in_company = COMPANY_ROLES[int(num_role)]
            else:
                user.role_in_company = update.text
            await user.asave()
            reply_text = f"–Ø –∑–∞–ø–æ–º–Ω—é. –£—Å–ø–µ—Ö–æ–≤ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ üòä"
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeRoleInCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        reply_text = FACE_BOT + ('–û–≥–æ, –≤—ã –≤–∑—è–ª–∏ –Ω–∞ —Å–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ üòä\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏:\n\n')
        for num, role in COMPANY_ROLES.items():
            reply_text += f'{num}. {role}\n'
        reply_text += '\n–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî –≤–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –ø–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.'
        return reply_text

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_role

    def _set_messages(self) -> Dict:
        messages = [MessageChangeRoleInCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageRegisterCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:register_company'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            company, fact_create = await Company.objects.aget_or_create(name=update.text)
            if company and fact_create:
                user.company = company
                await user.asave()
                reply_text = (f"<b>–ö–æ–º–ø–∞–Ω–∏—è {company.name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, "
                              f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>")
                next_state = 'reset_state'
            elif company and not fact_create:
                user.company = company
                await user.asave()
                reply_text = (f"<b>–ö–æ–º–ø–∞–Ω–∏—è {company.name} —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, "
                              f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>")
                next_state = 'reset_state'
            else:
                reply_text = "<b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏</b>"
        except Exception:
            pass
        return reply_text, next_state


class RegisterCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.register_company

    def _set_messages(self) -> Dict:
        messages = [MessageRegisterCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class AddedCompanyMemberButton(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - üôã‚Äç‚ôÄÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã üôã‚Äç‚ôÇÔ∏è"""

    def _set_name(self) -> str:
        return 'üôã‚Äç‚ôÄÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã üôã‚Äç‚ôÇÔ∏è'

    def _set_next_state(self) -> str:
        return 'reset_state'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        from ..loader import bot
        reply_text = f'{FACE_BOT} –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ‚úâÔ∏è\n\n'
        reply_text += utils.create_invite_link(
            bot_username=(await bot.get_me()).username, referrer_id=update.from_user.id)
        reply_text += (f'\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –≤–∞—à–µ–º—É –∫–æ–ª–ª–µ–≥–µ –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É. –û–Ω –∏–ª–∏ –æ–Ω–∞ –∫–ª–∏–∫–Ω–µ—Ç –ø–æ '
                       f'—Å—Å—ã–ª–∫–µ –∏ –ø–æ–ø–∞–¥–µ—Ç –∫–æ –º–Ω–µ. –ê —è –≤–ø–∏—à—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É üôÇ\n\n'
                       f'–í–Ω–∏–º–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ {INVITE_LINK_LIFE // 60} –º–∏–Ω—É—Ç')
        return reply_text, self.next_state


class CompanyMenu(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –ö–æ–º–ø–∞–Ω–∏—è"""

    def _set_name(self) -> str:
        return 'üéØ \t –ú–æ—è –∫–æ–º–∞–Ω–¥–∞'

    def _set_next_state(self) -> str:
        return 'reset_state'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        user = await User.objects.filter(
            tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
        if not user.company:
            reply_text = f"<b>{FACE_BOT}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞</b>\n\n"
            self.children_buttons = [RegisterCompany(parent_name=self.class_name)]

        else:
            self.children_buttons = self._set_children()
            reply_text = f'{FACE_BOT} –ö–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏ <b>"{user.company.name}"</b>\n\n'
            reply_text += (f"<b>–í–∞—à–∞ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                           f"{user.role_in_company if user.role_in_company else ''}\n\n")
            reply_text += (f"<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                           f"{user.company.about_company if user.company.about_company else ''}\n\n")
            reply_text += (f"<b>–û –∫–æ–º–∞–Ω–¥–µ:</b> "
                           f"{user.company.about_team if user.company.about_team else ''}\n\n")
            reply_text += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            num = 0
            async for member in user.company.members.all():
                num += 1
                reply_text += (f"{num}. {member.role_in_company} - "
                               f"{'–í—ã' if member == user else member.username}\n")
            reply_text += '\n–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å üëá'
        return reply_text, self.next_state

    def _set_children(self) -> List:
        return [
            CompanyCalendarButton(parent_name=self.class_name),
            AddedCompanyMemberButton(parent_name=self.class_name),
            ChangeRoleInCompany(parent_name=self.class_name),
            ChangeAboutCompany(parent_name=self.class_name),
            ChangeAboutTeam(parent_name=self.class_name),
        ]

# TODO 7.–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏ —Ä–∞–∑–≤–∏—Ç–∏—è–º —Å–µ—Ä–≤–∏—Å–∞
# (–ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–µ–π—à–µ–π —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏) –¥–∞–Ω–Ω–∞—è –∏–Ω6—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞
# –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –°–£–ë–î. –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
# –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
# –°–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º –≤—ã–ª–æ–∂–∏—Ç—å –≤—Å—ë –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏–≤–∞–Ω–æ–≤—É.
