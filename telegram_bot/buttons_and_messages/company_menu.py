"""–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
from typing import List, Optional, Dict

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from users.models import User
from ..config import FACE_BOT, COMPANY_ROLES, INVITE_LINK_LIFE
from .base_classes import Utils, BaseButton, BaseMessage, GoToBack
from ..utils.states import FSMCompanyMenuStates
from company.models import Company
from utils import utils
from ..utils.misc_utils import create_invite_link


class MessageChangeAboutTeam(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_about_team'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.company.about_team = update.text
            await user.company.asave()
            reply_text = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ {user.company.name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>"
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeAboutTeam(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–µ:</b>\n'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_about_team

    def _set_messages(self) -> Dict:
        messages = [MessageChangeAboutTeam(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageChangeAboutCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_about_company'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            user.company.about_company = update.text
            await user.company.asave()
            reply_text = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ {user.company.name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>"
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeAboutCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_about_company

    def _set_messages(self) -> Dict:
        messages = [MessageChangeAboutCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageChangeRoleInCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:change_role'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(
                tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
            if (num_role := await utils.data_to_str_digits(data=update.text)) \
                    and 1 <= int(num_role) <= len(COMPANY_ROLES):
                user.role_in_company = COMPANY_ROLES[int(num_role)]
            else:
                user.role_in_company = update.text
            await user.asave()
            reply_text = f"<b>–í–∞—à–∞ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {user.company.name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b>"
            next_state = 'reset_state'
        except Exception:
            pass
        return reply_text, next_state


class ChangeRoleInCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        reply_text = FACE_BOT + ('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –í–∞—à–µ–π —Ä–æ–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ '
                                 '—Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç–∞–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n\n')
        for num, role in COMPANY_ROLES.items():
            reply_text += f'{num}. {role}\n'
        return reply_text

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.change_role

    def _set_messages(self) -> Dict:
        messages = [MessageChangeRoleInCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class MessageRegisterCompany(BaseMessage, Utils):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_state_or_key(self) -> str:
        return 'FSMCompanyMenuStates:register_company'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        next_state = self.next_state
        reply_text = self.reply_text
        try:
            user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
            company, fact_create = await Company.objects.aget_or_create(name=update.text)
            if company and fact_create:
                user.company = company
                await user.asave()
                reply_text = (f"<b>–ö–æ–º–ø–∞–Ω–∏—è {company.name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, "
                              f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>")
                next_state = 'reset_state'
            elif company and not fact_create:
                user.company = company
                await user.asave()
                reply_text = (f"<b>–ö–æ–º–ø–∞–Ω–∏—è {company.name} —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, "
                              f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>")
                next_state = 'reset_state'
            else:
                reply_text = "<b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏</b>"
        except Exception:
            pass
        return reply_text, next_state


class RegisterCompany(BaseButton, Utils):
    """–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    def _set_name(self) -> str:
        return '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</b>'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    def _set_next_state(self) -> Optional[str]:
        return FSMCompanyMenuStates.register_company

    def _set_messages(self) -> Dict:
        messages = [MessageRegisterCompany(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}


class CompanyCalendarButton(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥—ã"""

    def _set_name(self) -> str:
        return 'üìÜ \t –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥—ã'

    def _set_next_state(self) -> str:
        return 'reset_state'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        user = await User.objects.filter(
            tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
        reply_text = f'<b>{FACE_BOT} –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–º–∞–Ω–¥—ã, –∫–æ–º–ø–∞–Ω–∏–∏ "{user.company.name}"</b>\n\n'
        reply_text += user.company.calendar or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        return reply_text, self.next_state


class AddedCompanyMemberButton(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã"""

    def _set_name(self) -> str:
        return 'ü§µ \t –î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã'

    def _set_next_state(self) -> str:
        return 'reset_state'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        from ..loader import bot
        reply_text = (f'{FACE_BOT} <b>–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n'
                      f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É —á–ª–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ–Ω –±—É–¥–µ—Ç '
                      f'–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –í–∞—à—É –∫–æ–º–∞–Ω–¥—É\n\n'
                      f'‚ö† –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ - {INVITE_LINK_LIFE // 60} –º–∏–Ω—É—Ç\n\n')
        reply_text += create_invite_link(
            bot_username=(await bot.get_me()).username, referrer_id=update.from_user.id)
        return reply_text, self.next_state


class CompanyMenu(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –ö–æ–º–ø–∞–Ω–∏—è"""

    def _set_name(self) -> str:
        return 'üè¢ \t –ö–æ–º–ø–∞–Ω–∏—è'

    def _set_next_state(self) -> str:
        return 'reset_state'

    async def _set_answer_logic(self, update: Message, state: Optional[FSMContext] = None):
        user = await User.objects.filter(
            tg_accounts__tg_user_id=update.from_user.id).select_related("company").afirst()
        if not user.company:
            reply_text = f"<b>{FACE_BOT}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞</b>\n\n"
            self.children_buttons = [RegisterCompany(parent_name=self.class_name)]

        else:
            self.children_buttons = self._set_children()
            # from asgiref.sync import sync_to_async
            # company_members = await sync_to_async(list)(user.company.members.all())
            # company_members = [member async for member in user.company.members.all()]
            # for num, member in enumerate(user.company.members.all(), 1):

            reply_text = f'<b>{FACE_BOT} –ö–æ–º–ø–∞–Ω–∏—è "{user.company.name}"</b>\n\n'
            # reply_text += (f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> "
            #                f"{user.company.name if user.company.name else ''}\n")
            reply_text += (f"<b>–í–∞—à–∞ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                           f"{user.role_in_company if user.role_in_company else ''}\n\n")
            reply_text += (f"<b>–û –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                           f"{user.company.about_company if user.company.about_company else ''}\n\n")
            reply_text += (f"<b>–û –∫–æ–º–∞–Ω–¥–µ:</b> "
                           f"{user.company.about_team if user.company.about_team else ''}\n\n")
            reply_text += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
            num = 0
            async for member in user.company.members.all():
                num += 1
                reply_text += (f"{num}. {member.role_in_company} - "
                               f"{'–í—ã' if member == user else member.username}\n")
        return reply_text, self.next_state

    def _set_children(self) -> List:
        return [
            # CompanyCalendarButton(parent_name=self.class_name),
            AddedCompanyMemberButton(parent_name=self.class_name),
            ChangeRoleInCompany(parent_name=self.class_name),
            ChangeAboutCompany(parent_name=self.class_name),
            ChangeAboutTeam(parent_name=self.class_name),
        ]
