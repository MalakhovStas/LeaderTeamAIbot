import random
from typing import List, Tuple, Union, Optional, Dict

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from .base_classes import BaseButton, BaseMessage
from ..config import FACE_BOT, DEFAULT_FEED_ANSWER
from ..utils.states import FSMMainMenuStates
from users.models import User
from .contacts_buttons import ContactManagerButton


class RegenerateAIResponse(BaseButton):

    def _set_name(self) -> str:
        return 'üîÅ \t –ü—Ä–µ–¥–ª–æ–∂–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ'

    def _set_children(self) -> List:
        return [
            # self, SubmitForRevisionTaskQuestionOpenAI(new=False),
            CreateNewTaskForQuestionOpenAI(new=False),
            ContactManagerButton(new=False)
        ]

    async def _set_answer_logic(self, update: CallbackQuery,
                                state: FSMContext) -> Tuple[Union[str, Tuple], Optional[str]]:
        user_id = update.from_user.id
        reply_text = self.default_i_generate_text
        wait_msg = await self.bot.send_message(chat_id=user_id, text=self.default_generate_answer)

        if ai_messages_data := await self.button_search_and_action_any_collections(
                user_id=user_id, action='get', button_name='ai_messages_data', updates_data=True):

            # –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            ai_messages_data.pop(-1)
            # –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ - prompt
            task_to_generate_ai = ai_messages_data.pop(-1).get('content')

            ai_answer = await self.ai.some_question(
                prompt=task_to_generate_ai,
                messages_data=ai_messages_data,
                user_id=user_id,
                update=update
            )
        else:
            ai_answer = DEFAULT_FEED_ANSWER

        if ai_answer != DEFAULT_FEED_ANSWER:
            reply_text = reply_text + ai_answer + ':ai:some_question'
        else:
            self.children_buttons = []
            reply_text = self.reply_text

        await self.bot.delete_message(chat_id=user_id, message_id=wait_msg.message_id)

        return reply_text, self.next_state


class CreateNewTaskForQuestionOpenAI(BaseButton):
    """–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

    def _set_name(self) -> str:
        return 'üìù \t –û–±—Å—É–¥–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É'

    async def _set_answer_logic(
            self, update, state: FSMContext) -> Tuple[Union[str, Tuple], Optional[str]]:
        # —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await self.button_search_and_action_any_collections(
            user_id=update.from_user.id, action='pop',
            button_name='ai_messages_data',
            updates_data=True
        )
        logic_button = QuestionOpenAI(new=False)
        self.children_buttons = logic_button.children_buttons
        return await logic_button._set_answer_logic(update, state)


class MessageOnceForQuestionOpenAIButton(BaseMessage):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–Ω—ã–π OpenAI"""

    def _set_state_or_key(self) -> str:
        return 'FSMMainMenuStates:question_openai'

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ'

    def _set_next_state(self) -> str:
        return FSMMainMenuStates.question_openai

    def _set_children(self) -> List:
        return [
            RegenerateAIResponse(parent_name=self.class_name, parent_button=self),
            CreateNewTaskForQuestionOpenAI(parent_name=self.class_name, parent_button=self),
            ContactManagerButton(new=False)
        ]

    async def _set_answer_logic(
            self, update: Message, state: FSMContext) -> Tuple[Union[str, Tuple], Optional[str]]:
        self.children_buttons = [
            RegenerateAIResponse(new=False),
            CreateNewTaskForQuestionOpenAI(new=False),
            ContactManagerButton(new=False)
        ]
        reply_text = self.default_i_generate_text
        user_id = update.from_user.id
        task_to_generate_ai = update.text.strip()
        wait_msg = await self.bot.send_message(chat_id=user_id, text=self.default_generate_answer)

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ai_messages_data = await self.button_search_and_action_any_collections(
            user_id=user_id, action='get', button_name='ai_messages_data', updates_data=True)

        if not ai_messages_data:
            # –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            ai_messages_data = await self.button_search_and_action_any_collections(
                user_id=user_id, action='add', button_name='ai_messages_data',
                instance_button=list(), updates_data=True)

        ai_answer = await self.ai.some_question(
            prompt=task_to_generate_ai,
            messages_data=ai_messages_data,
            user_id=user_id,
            update=update
        )

        if ai_answer != DEFAULT_FEED_ANSWER:
            reply_text = reply_text + ai_answer + ':ai:some_question'

        else:
            # —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await self.button_search_and_action_any_collections(
                user_id=user_id, action='pop', button_name='ai_messages_data', updates_data=True)
            self.children_buttons = []
            reply_text = self.reply_text

        await self.bot.delete_message(chat_id=user_id, message_id=wait_msg.message_id)

        user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
        user.ai_dialog += (f'\n\nüôã\t\t{task_to_generate_ai}'
                           f'\n\n{reply_text.rstrip(":ai:some_question")}')
        await user.asave()
        return reply_text, self.next_state


class QuestionOpenAI(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å OpenAI"""

    def _set_name(self) -> str:
        return 'üôã \t –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É'  # ‚úç

    def _set_next_state(self) -> str:
        return FSMMainMenuStates.question_openai

    def _set_reply_text(self) -> str:
        return FACE_BOT + '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ'

    async def _set_answer_logic(
            self, update: Message, state: FSMContext) -> Tuple[Union[str, Tuple], Optional[str]]:
        reply_text, next_state = self.reply_text, self.next_state
        user = await User.objects.filter(tg_accounts__tg_user_id=update.from_user.id).afirst()
        if not user.ai_dialog:
            reply_text = (
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –° —á–µ–º —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã? –ì–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç "
                "–∏–¥–µ–π –∏–ª–∏ —Ñ–æ–∫—É—Å–∞? –•–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞? –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! "
                "–ì–ª–∞–≤–Ω–æ–µ –Ω–∞—á–∞—Ç—å! –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª—è—Ç—å –±–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ "
                "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ - —Ç–æ–≥–¥–∞ —è –±—É–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å. –ù–µ "
                "–ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –ø–µ—Ä–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, "
                "–Ω–æ —è —É—á—É—Å—å –±—ã—Ç—å –ø–æ–±—ã—Å—Ç—Ä–µ–µ.")
        else:
            ai_greetings_list = [
                "<b>–ß—Ç–æ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑?</b>",
                "<b>–û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?</b>",
                "<b>–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç</b>",
            ]
            reply_text = random.choice(ai_greetings_list)
        return reply_text, next_state

    def _set_messages(self) -> Dict:
        message = MessageOnceForQuestionOpenAIButton(parent_name=self.class_name)
        return {message.state_or_key: message}

    def _set_children(self) -> List:
        return [ContactManagerButton(new=False)]
